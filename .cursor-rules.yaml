# Cursor Rules for Event Horizon
# Clean, organized, and maintainable code standards

# =============================================================================
# GLOBAL SETTINGS
# =============================================================================

# Code formatting standards
max_line_length: 100
indent_style: space
indent_size: 2
charset: utf-8
trim_trailing_whitespace: true
insert_final_newline: true

# =============================================================================
# JAVASCRIPT/TYPESCRIPT CONFIGURATION
# =============================================================================

javascript:
  # Linting and formatting
  lint: true
  test_pattern: "**/*.test.{js,ts,tsx}"
  
  # Tool configurations
  eslint_config: ".eslintrc.js"
  prettier_config: ".prettierrc"

typescript:
  # TypeScript specific settings
  strict: true
  no_implicit_any: true
  no_unused_locals: true

# =============================================================================
# DOCUMENTATION
# =============================================================================

docs:
  main_readme: "README.md"
  contributing: "docs/contributing.md"
  ci_cd: "docs/ci_cd.md"
  frontend: "docs/frontend.md"
  cursor_rules: "docs/cursor-rules.md"
  code_of_conduct: "CODE_OF_CONDUCT.md"
  license: "LICENSE"

# =============================================================================
# CI/CD CONFIGURATION
# =============================================================================

ci:
  workflows_dir: ".github/workflows"
  main_workflows:
    - nextjs-tests.yml
    - integration-tests.yml
    - vercel-deployment.yml
  secrets_required:
    - MAPBOX_TOKEN
    - SUPABASE_URL
    - SUPABASE_ANON_KEY

# =============================================================================
# DEPLOYMENT CONFIGURATION
# =============================================================================

vercel:
  config_file: "vercel.json"
  env_vars:
    - MAPBOX_TOKEN
    - SUPABASE_URL
    - SUPABASE_ANON_KEY

# =============================================================================
# FILE ORGANIZATION
# =============================================================================

structure:
  docs: "docs/"
  app: "app/"
  components: "app/components/"
  api: "app/api/"
  config_files:
    - "package.json"
    - "next.config.js"
    - "tailwind.config.ts"
    - "tsconfig.json"
    - "vercel.json"
    - ".cursor-rules.yaml"

# =============================================================================
# IGNORE PATTERNS
# =============================================================================

ignore:
  # Environment and secrets
  # - .env
  # - .env.local
  # - .env.*.local
  
  # Build outputs
  - .next/
  - out/
  - dist/
  
  # Dependencies
  - node_modules/
  - npm-debug.log*
  - yarn-debug.log*
  - yarn-error.log*
  
  # IDEs and editors
  - .vscode/
  - .idea/
  - *.swp
  - *.swo
  - *~
  
  # OS files
  - .DS_Store
  - .DS_Store?
  - ._*
  - Thumbs.db
  
  # Logs and temp files
  - *.log
  - logs/
  - *.tmp
  - *.temp
  
  # Vercel
  - .vercel/

# =============================================================================
# CODE QUALITY STANDARDS
# =============================================================================

standards:
  # JavaScript/TypeScript standards
  javascript:
    - "Use ES6+ syntax"
    - "Use meaningful variable names"
    - "Keep functions small and focused"
    - "Use const/let instead of var"
    - "Use TypeScript for better type safety"
    - "Use environment variables for all secrets"
    - "Write tests for new features"
  
  # React/Next.js standards
  react:
    - "Use functional components with hooks"
    - "Keep components focused and reusable"
    - "Use proper TypeScript interfaces"
    - "Handle loading and error states"
    - "Use Next.js App Router patterns"
  
  # Documentation standards
  docs:
    - "Keep documentation up to date"
    - "Use clear and concise language"
    - "Include code examples where helpful"
    - "Update docs when making significant changes"
    - "Use emojis for better readability"
  
  # Testing standards
  testing:
    - "Write unit tests for utilities"
    - "Write integration tests for API routes"
    - "Test error handling scenarios"
    - "Use meaningful test descriptions" 