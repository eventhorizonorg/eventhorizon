name: Backend API Tests

on:
  push:
    branches: [main, develop]
    paths:
      - 'app/api/**'
      - 'package.json'
      - 'next.config.js'
  pull_request:
    branches: [main]

permissions:
  contents: read

jobs:
  backend-test:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'   # LTS
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: TypeScript type checking
        run: npx tsc --noEmit

      - name: ESLint
        run: npm run lint

      - name: Test API routes structure
        run: |
          set -euo pipefail
          if [ -d "app/api" ]; then
            echo "✓ API routes directory exists"
            ls -la app/api/ || true
          else
            echo "✗ API routes directory not found"
            exit 1
          fi

          test -f app/api/messages/route.ts \
            && echo "✓ Messages API route exists" \
            || { echo "✗ Messages API route not found"; exit 1; }

          test -f app/api/mapbox-token/route.ts \
            && echo "✓ Mapbox token API route exists" \
            || { echo "✗ Mapbox token API route not found"; exit 1; }

      - name: Test API route syntax
        shell: bash
        run: |
          set -euo pipefail
          shopt -s globstar nullglob
          for file in app/api/**/*.ts; do
            npx tsc --noEmit "$file" && echo "✓ $file syntax is valid"
          done

      - name: Test Supabase integration (client creation + ping)
        env:
          SUPABASE_URL: ${{ vars.SUPABASE_URL }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
        run: |
          if [ -z "${SUPABASE_URL:-}" ] || [ -z "${SUPABASE_ANON_KEY:-}" ]; then
            echo "⚠ Supabase env not fully provided; skipping integration ping"
            exit 0
          fi

          node --input-type=module -e "
            import { createClient } from '@supabase/supabase-js';
            const url = process.env.SUPABASE_URL;
            const key = process.env.SUPABASE_ANON_KEY;
            const supabase = createClient(url, key);
            const { data, error } = await supabase.from('messages').select('id').limit(1);
            if (error) { console.error('✗ Supabase query error:', error.message); process.exit(1); }
            console.log('✓ Supabase client OK; rows:', data?.length ?? 0);
          "

      - name: Build (ensures API routes compile with env present)
        env:
          NEXT_PUBLIC_MAPBOX_TOKEN: ${{ secrets.MAPBOX_TOKEN }}
          NEXT_PUBLIC_SUPABASE_URL: ${{ vars.SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
        run: npm run build