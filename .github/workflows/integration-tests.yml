name: Integration Tests

on:
  push:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM

jobs:
  integration-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        pip install requests pytest
    
    - name: Test API endpoints with real services
      env:
        MAPBOX_TOKEN: ${{ secrets.MAPBOX_TOKEN }}
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
      run: |
        python -m pytest tests/integration/ -v || echo "No integration tests found yet"
    
    - name: Test Mapbox token validity
      env:
        MAPBOX_TOKEN: ${{ secrets.MAPBOX_TOKEN }}
      run: |
        python -c "
        import requests
        import os
        
        token = os.getenv('MAPBOX_TOKEN')
        if token:
            # Test Mapbox API with token
            response = requests.get(
                'https://api.mapbox.com/geocoding/v5/mapbox.places/test.json',
                params={'access_token': token, 'q': 'test'}
            )
            if response.status_code == 200:
                print('✓ Mapbox token is valid')
            else:
                print(f'✗ Mapbox token validation failed: {response.status_code}')
        else:
            print('⚠ No Mapbox token provided for testing')
        "
    
    - name: Test Supabase data access
      env:
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
      run: |
        python -c "
        import os
        from dotenv import load_dotenv
        load_dotenv()
        
        from app import get_supabase_client
        
        client = get_supabase_client()
        if client:
            try:
                # Test basic data access
                response = client.table('messages').select('id').limit(1).execute()
                print(f'✓ Supabase connection successful, found {len(response.data)} messages')
            except Exception as e:
                print(f'✗ Supabase data access failed: {e}')
        else:
            print('✗ Supabase client creation failed')
        " 