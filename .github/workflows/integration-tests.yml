name: Integration Tests

on:
  push:
    branches: [main]
  schedule:
    - cron: '0 2 * * *'   # UTC

permissions:
  contents: read

jobs:
  integration-test:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'     # LTS
          cache: 'npm'

      - name: Install deps
        run: npm ci

      - name: Build
        env:
          NEXT_PUBLIC_MAPBOX_TOKEN: ${{ secrets.MAPBOX_TOKEN }}
          SUPABASE_URL: ${{ vars.SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_URL: ${{ vars.SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
        run: npm run build

      - name: Start server & probe endpoints
        env:
          NEXT_PUBLIC_MAPBOX_TOKEN: ${{ secrets.MAPBOX_TOKEN }}
          SUPABASE_URL: ${{ vars.SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_URL: ${{ vars.SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
          PORT: 3000
        run: |
          set -euo pipefail
          npm start & 
          SERVER_PID=$!
          trap "kill $SERVER_PID || true" EXIT

          # wait for readiness (max ~30s)
          for i in {1..30}; do
            if curl -fsS "http://localhost:3000" >/dev/null; then break; fi
            sleep 1
          done

          echo "Probing endpoints…"
          curl -fsS "http://localhost:3000/api/messages" >/dev/null && echo "✓ /api/messages"
          curl -fsS "http://localhost:3000/api/mapbox-token" >/dev/null && echo "✓ /api/mapbox-token"

      - name: Test Mapbox token validity
        env:
          MAPBOX_TOKEN: ${{ secrets.MAPBOX_TOKEN }}
        run: |
          node -e "
            const https = require('https');
            const url = 'https://api.mapbox.com/geocoding/v5/mapbox.places/test.json?access_token=' + process.env.MAPBOX_TOKEN;
            https.get(url, res => {
              if (res.statusCode === 200) {
                console.log('✓ Mapbox token is valid');
              } else {
                console.error('✗ Mapbox token failed with', res.statusCode); process.exit(1);
              }
            }).on('error', e => { console.error('✗ Mapbox request error:', e.message); process.exit(1); });
          "

      - name: Test Supabase data access
        env:
          SUPABASE_URL: ${{ vars.SUPABASE_URL }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
        run: |
          node --input-type=module -e "
            import { createClient } from '@supabase/supabase-js';
            const url = process.env.SUPABASE_URL;
            const key = process.env.SUPABASE_ANON_KEY;
            if (!url || !key) { console.error('✗ Missing Supabase env'); process.exit(1); }
            const supabase = createClient(url, key);
            const { data, error } = await supabase.from('messages').select('id').limit(1);
            if (error) { console.error('✗ Supabase query error:', error.message); process.exit(1); }
            console.log('✓ Supabase OK, rows:', data?.length ?? 0);
          "