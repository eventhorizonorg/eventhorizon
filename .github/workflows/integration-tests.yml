name: Integration Tests

on:
  push:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM

jobs:
  integration-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build application
      run: npm run build
    
    - name: Test API endpoints with real services
      env:
        NEXT_PUBLIC_MAPBOX_TOKEN: ${{ secrets.MAPBOX_TOKEN }}
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
      run: |
        # Test Next.js API routes
        echo "Testing Next.js API routes..."
        
        # Start Next.js server in background
        npm start &
        SERVER_PID=$!
        
        # Wait for server to start
        sleep 10
        
        # Test API endpoints
        if curl -f http://localhost:3000/api/messages > /dev/null 2>&1; then
          echo "✓ /api/messages endpoint is accessible"
        else
          echo "✗ /api/messages endpoint failed"
        fi
        
        if curl -f http://localhost:3000/api/mapbox-token > /dev/null 2>&1; then
          echo "✓ /api/mapbox-token endpoint is accessible"
        else
          echo "✗ /api/mapbox-token endpoint failed"
        fi
        
        # Kill server
        kill $SERVER_PID || true
    
    - name: Test Mapbox token validity
      env:
        MAPBOX_TOKEN: ${{ secrets.MAPBOX_TOKEN }}
      run: |
        node -e "
        const https = require('https');
        
        const token = process.env.MAPBOX_TOKEN;
        if (token) {
          const url = 'https://api.mapbox.com/geocoding/v5/mapbox.places/test.json?access_token=' + token + '&q=test';
          
          https.get(url, (res) => {
            if (res.statusCode === 200) {
              console.log('✓ Mapbox token is valid');
            } else {
              console.log('✗ Mapbox token validation failed:', res.statusCode);
              process.exit(1);
            }
          }).on('error', (err) => {
            console.error('✗ Mapbox API request failed:', err.message);
            process.exit(1);
          });
        } else {
          console.log('⚠ No Mapbox token provided for testing');
        }
        "
    
    - name: Test Supabase data access
      env:
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
      run: |
        node -e "
        const { createClient } = require('@supabase/supabase-js');
        
        const url = process.env.SUPABASE_URL;
        const key = process.env.SUPABASE_ANON_KEY;
        
        if (url && key) {
          try {
            const supabase = createClient(url, key);
            
            // Test basic data access
            supabase
              .from('messages')
              .select('id')
              .limit(1)
              .then(({ data, error }) => {
                if (error) {
                  console.error('✗ Supabase data access failed:', error.message);
                  process.exit(1);
                } else {
                  console.log('✓ Supabase connection successful, found', data.length, 'messages');
                }
              });
          } catch (error) {
            console.error('✗ Supabase client creation failed:', error.message);
            process.exit(1);
          }
        } else {
          console.log('✗ Supabase credentials not provided');
          process.exit(1);
        }
        " 